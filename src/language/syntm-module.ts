import type { DefaultSharedModuleContext, LangiumServices, LangiumSharedServices, Module, PartialLangiumServices } from 'langium';
import { AbstractExecuteCommandHandler, ExecuteCommandAcceptor } from 'langium';
import { createDefaultModule, createDefaultSharedModule, inject } from 'langium';
import { SyntmGeneratedModule, SyntmGeneratedSharedModule } from './generated/module.js';
import { SyntmValidator, registerValidationChecks } from './syntm-validator.js';
import { parseAndGenerate } from '../web/index.js';

class SyntmCommandHandler extends AbstractExecuteCommandHandler {
    registerCommands(acceptor: ExecuteCommandAcceptor): void {
        // accept a single command called 'parseAndGenerate'
        acceptor('parseAndGenerate', args => {
            // invoke generator on this data, and return the response
            return parseAndGenerate(args[0]);
        });
    }
}

/**
 * Declaration of custom services - add your own service classes here.
 */
export type SyntmAddedServices = {
    validation: {
        SyntmValidator: SyntmValidator
    }
}

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type SyntmServices = LangiumServices & SyntmAddedServices

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const SyntmModule: Module<SyntmServices, PartialLangiumServices & SyntmAddedServices> = {
    validation: {
        SyntmValidator: () => new SyntmValidator()
    }
};

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createSyntmServices(context: DefaultSharedModuleContext): {
    shared: LangiumSharedServices,
    Syntm: SyntmServices
} {
    const shared = inject(
        createDefaultSharedModule(context),
        SyntmGeneratedSharedModule
    );
    const Syntm = inject(
        createDefaultModule({ shared }),
        SyntmGeneratedModule,
        SyntmModule
    );
    shared.ServiceRegistry.register(Syntm);
    shared.lsp.ExecuteCommandHandler = new SyntmCommandHandler();
    registerValidationChecks(Syntm);
    return { shared, Syntm };
}
